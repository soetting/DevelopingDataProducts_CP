test = segmentationOriginal[ segmentationOriginal$Case == "Test",]
modFit = train( Class ~ . , method = "rpart", data=training )
plot(modFit)
plot(modFit$finalModel, uniform=TRUE )
text(modFIt$FinalModel, use.n = TRUE, all=TRUE, csx=.8)
text(modFit$FinalModel, use.n = TRUE, all=TRUE, csx=.8)
text(modFit$finalModel, use.n = TRUE, all=TRUE, csx=.8)
training = segmentationOriginal[ segmentationOriginal$Case == "Train",]
training = segmentationOriginal[ segmentationOriginal$Case == "Train",]
test = segmentationOriginal[ segmentationOriginal$Case == "Test",]
set.seed(125)
modFit = train( Class ~ . , method = "rpart", data=training )
plot(modFit$finalModel, uniform=TRUE )
text(modFit$finalModel, use.n = TRUE, all=TRUE, cex=.8)
plot(modFit$finalModel, uniform=FALSE )
text(modFit$finalModel, use.n = TRUE, all=TRUE, cex=.8)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
str(olive)
modFit = train( Area ~., method = "rpart", data = olive )
newdata = as.data.frame(t(colMeans(olive)))
library(rattle)
install.packages("rattle")
set.seed(125)
modFit = train( Class ~ . , method = "rpart", data=training )
library(rattle)
fancyRpartPlot(modFit$finalModel)
plot(modFit$finalModel, uniform=FALSE )
text(modFit$finalModel, use.n = TRUE, all=TRUE, cex=.8)
data(olive)
olive = olive[,-1]
modFit = train( Area ~., method = "rpart", data = olive )
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit, newdata)
str(olive$Area)
plot(olive$Area)
rm(olive)
data(olive)
olive = olive[,-1]
modFit = train( Area ~., method = "rpart", data = olive )
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit, newdata)
str(olive)
data(olive)
str(olive)
olive = olive[,-1]
modFit = train( Area ~., method = "party", data = olive )
modFit = train( Area ~., method = "tree", data = olive )
modFit = train( Area ~., method = "rpart", data = olive )
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit, newdata)
?subset
data(segmentationOriginal)
training = subset( segmentationOriginal, Case == "Train")
set.seed(125)
modFit = train( Class ~ . , method = "rpart", data=training )
plot(modFit$finalModel, uniform=FALSE )
text(modFit$finalModel, use.n = TRUE, all=TRUE, cex=.8)
?tree
library(tree)
?tree
modFit = tree( Area ~., data = olive )
predict(modFit, newdata)
?train
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
function (..., list = character(), package = NULL, lib.loc = NULL,
data(SAheart)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
str(SAhear)
str(SAheart)
modFit = glm( chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA,
family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
testpredict = predict(modFit, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass( testSA$chd, testpredict)
modFit = glm( chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA,
family = "binomial")
testpredict = predict(modFit, testSA)
missClass( testSA$chd, testpredict)
set.seed(13234)
modFit = glm( chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA,
family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
testpredict = predict(modFit, testSA)
missClass( testSA$chd, testpredict)
modFit = glm( chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA,
family = 'binomial')
testpredict = predict(modFit, testSA)
missClass( testSA$chd, testpredict)
modFit = train( chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA,
model = 'lda', family = 'binomial')
modFit = train( chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA,
model = 'glm', family = 'binomial')
testpredict = predict(modFit, testSA)
missClass( testSA$chd, testpredict)
trainpredict = predict(modFit, trainSA)
missClass( trainSA$chd, trainpredict )
set.seed(13234)
modFit = train( chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA,
model = 'glm', family = 'binomial')
trainpredict = predict(modFit, trainSA)
missClass( trainSA$chd, trainpredict )
trainpredict
trainSA$chd
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit = train( chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA,
model = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
testpredict = predict(modFit, testSA)
missClass( testSA$chd, testpredict)
trainpredict = predict(modFit, trainSA)
missClass( trainSA$chd, trainpredict )
length(testpredict)
length(testSA$chd)
length(trainpredict)
length(trainSA$chd)
trainpredict
((( trainpredict > .5)*1) != train$chd )
((( trainpredict > .5)*1) != trainSA$chd )
ttt = cbind( train$chd, trainpredict )
ttt = cbind( trainSA$chd, trainpredict )
fix(ttt)
testpredict = predict(modFit$finalModel, testSA)
missClass( testSA$chd, testpredict)
trainpredict = predict(modFit$finalModel, trainSA)
missClass( trainSA$chd, trainpredict )
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit = train( chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA,
model = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
testpredict = predict(modFit$finalModel, testSA)
missClass( testSA$chd, testpredict)
trainpredict = predict(modFit$finalModel, trainSA)
missClass( trainSA$chd, trainpredict )
?glm
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit = glm( chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA,
family = "binomial")
testpredict = predict(modFit$finalModel, testSA)
testpredict = predict(modFit, testSA)
missClass( testSA$chd, testpredict)
modFit = train( chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA,
model = "lda", family = "binomial")
testpredict = predict(modFit, testSA)
missClass( testSA$chd, testpredict)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
modfit5 = train( y ~. , data=vowel.train, method = "rf" )
?varimp
?randomForest
modfit5 = randomForest(  y ~. , data=vowel.train )
importance( modfit5, type=2 )
?varImp
varImp( modfit5 )
modfit5 = randomForest(  y ~. , data=vowel.train )
varImp( modfit5 )
modfit5 = train( y ~. , data=vowel.train, method = "rf" )
varImp( modfit5 )
data(vowel.train)
data(vowel.test)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
modfit5 = train( y ~. , data=vowel.train, method = "rf" )
varImp( modfit5 )
data(vowel.train)
data(vowel.test)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
modfit5 = train( y ~. , data=vowel.train, method = "rf" )
importance( modfit5, type=2 )
varImp( modfit5 )
varImp( modfit5 , useModel = TRUE)
varImp( modfit5 , useModel = FALSE)
install.packages("pROC")
varImp( modfit5 , useModel = FALSE)
varImp( modfit5 )
modfit5 = randomForest( y ~. , data=vowel.train )
varImp( modfit5 )
modfit5 = train( y ~. , data=vowel.train, method = "rf" )
varImp( modfit5 )
data(vowel.train)
data(vowel.test)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
# modfit5 = train( y ~. , data=vowel.train, method = "rf" )
modfit5 = randomForest( y ~. , data=vowel.train )
importance( modfit5, type=2 )
varImp( modfit5 )
data(vowel.train)
data(vowel.test)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
# modfit5 = train( y ~. , data=vowel.train, method = "rf" )
modfit5 = randomForest( y ~. , data=vowel.train )
# importance( modfit5, type=2 )
varImp( modfit5 )
order(varImp( modfit5 ))
order(varImp( modfit5 ), desc = TRUE)
?order
order(varImp( modfit5 ), decreasing = TRUE)
data(vowel.train)
data(vowel.test)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
# modfit5 = train( y ~. , data=vowel.train, method = "rf" )
modfit5 = randomForest( y ~. , data=vowel.train )
order(varImp( modfit5 ), decreasing = TRUE)
data(vowel.train)
data(vowel.test)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
modfit5 = train( y ~. , data=vowel.train, method = "rf" )
# modfit5 = randomForest( y ~. , data=vowel.train )
order(varImp( modfit5 ), decreasing = TRUE)
varImp( modfit5 )
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modfit4 = glm( chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA,
family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
testpredict = predict(modfit4, testSA)
missClass( testSA$chd, testpredict)
trainpredict = predict(modfit4, trainSA)
missClass( trainSA$chd, trainpredict )
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modfit4 = train( chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA,
model = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
testpredict = predict(modfit4, testSA)
missClass( testSA$chd, testpredict)
trainpredict = predict(modfit4, trainSA)
missClass( trainSA$chd, trainpredict )
?predict
library(caret)
?predict
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modfit4 = train( chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA,
model = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
testpredict = predict(modfit4, testSA)
missClass( testSA$chd, testpredict)
?glm
?predict
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
# modfit4 = glm( chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA,
#              family = "binomial")
modfit4 = train( chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA,
model = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
testpredict = predict(modfit4, testSA, type = "response")
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modfit4 = glm( chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA,
family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
testpredict = predict(modfit4, testSA, type = "response")
missClass( testSA$chd, testpredict)
trainpredict = predict(modfit4, trainSA, type = "response")
missClass( trainSA$chd, trainpredict )
library(pgmm)
data(olive)
olive = olive[,-1]
modFit = tree( Area ~., data = olive )
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit, newdata)
plot(modFit$finalModel, uniform=FALSE )
text(modFit$finalModel, use.n = TRUE, all=TRUE, cex=.8)
plot(modFit$finalModel, uniform=TRUE )
str(olice)
str(olive)
data(olive)
olive = olive[,-1]
modfit3 = tree( Area ~., data = olive )
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit, newdata)
plot(modfit3$final, uniform=TRUE )
plot(modfit3 )
text(modFit$finalModel, use.n = TRUE, all=TRUE, cex=.8)
text(modfit3, use.n = TRUE, all=TRUE, cex=.8)
newdata
predict(modfit3, newdata)
str(olive$Area)
table(olive$Area)
setwd("C:/Users/owner/Desktop/Coursera R Code/Developing Data Products Course/OptionsPricingApp")
shiny::runApp()
shiny::runApp()
library(fOptions)
option.price = BSAmericanApproxOption("c", S = 25,
X = 41, Time = .5, r = .01,
b = .03, sigma = .30)
option.price@price
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?format
?format
shiny::runApp()
shiny::runApp()
shiny::runApp()
dollar(33)
library(ggplot2)
dollar(33)
?dollar
dollar_format(33.45)
library(scales)
dollar_format(33.45)
dollar( 33.45)
shiny::runApp()
shiny::runApp()
curdate()
sysdate()
Sys.Date()
shiny::runApp()
x
x = as.Date("2014-11-10")
x - Sys.Date()
as.numeric(x - Sys.Date())
shiny::runApp()
?seq
?min
ep = 100
xvalue = seq( ep * .75, ep * 1.25,
length.out = 100)
xvalue
yvalue = max( xvalue - ep, 0 ) - 3
yvalue
yvalue = xvalue - ep
yvalue
ifelse(xvalue > ep, xvalue-ep, 0)
yvalue = ifelse(xvalue > ep, xvalue - ep, 0) - 3
yvalue
ggplot( aes( x = xvalue, y = yvalue)) + geom_line()
class(yvalue)
class(xvalue)
ggplot( aes( x = xvalue, y = yvalue))
ggplot( xvalue, yvalue)
df = cbind( xvalue, yvalue)
ggplot( df, aes( x = xvalue, y = yvalue)) + geom_line()
df = data.frame( xvalue, yvalue)
ggplot( df, aes( x = xvalue, y = yvalue)) + geom_line()
ggplot( df, aes( x = xvalue, y = yvalue)) + geom_line() + ylab("pl")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
length(xvalue)
xvalue = seq( 0, 2, length.out = 100)
xvalue
shiny::runApp()
shiny::runApp()
?dateInput
shiny::runApp()
shiny::runApp()
?numericInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?h3
?headerPanel
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?theme
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?dollar
library(scales)
shiny::runApp()
shiny::runApp()
shiny::runApp()
?theme
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?geom_area
shiny::runApp()
?BSAmericanApproxOption
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?ifelse
?ylim
shiny::runApp()
shiny::runApp()
?dollar
?scale_y_continuous
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ep = 100
max(ep *.75, 1)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
